var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$Test$describe,
	'Leap',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$Test$test,
			'leap year',
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_community$elm_test$Expect$equal,
					true,
					_exercism$xelm$Leap$isLeapYear(1996));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'non-leap year',
			function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_community$elm_test$Expect$equal,
					false,
					_exercism$xelm$Leap$isLeapYear(1997));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'non-leap even year',
			function (_p4) {
				var _p5 = _p4;
				return A2(
					_elm_community$elm_test$Expect$equal,
					false,
					_exercism$xelm$Leap$isLeapYear(1998));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'century',
			function (_p6) {
				var _p7 = _p6;
				return A2(
					_elm_community$elm_test$Expect$equal,
					false,
					_exercism$xelm$Leap$isLeapYear(1900));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'second century',
			function (_p8) {
				var _p9 = _p8;
				return A2(
					_elm_community$elm_test$Expect$equal,
					false,
					_exercism$xelm$Leap$isLeapYear(1800));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'fourth century',
			function (_p10) {
				var _p11 = _p10;
				return A2(
					_elm_community$elm_test$Expect$equal,
					true,
					_exercism$xelm$Leap$isLeapYear(2400));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'y2k',
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_community$elm_test$Expect$equal,
					true,
					_exercism$xelm$Leap$isLeapYear(2000));
			})
		]));
var _exercism$xelm$Main$emit = _elm_lang$core$Native_Platform.outgoingPort(
	'emit',
	function (v) {
		return [v._0, v._1];
	});
var _exercism$xelm$Main$main = {
	main: A2(_rtfeldman$node_test_runner$Test_Runner_Node$run, _exercism$xelm$Main$emit, _exercism$xelm$Main$tests),
	flags: _elm_lang$core$Json_Decode$value
};
