var _exercism$xelm$Triangle$triangleKind = F3(
	function (a, b, c) {
		var _p0 = _elm_lang$core$List$sort(
			_elm_lang$core$Native_List.fromArray(
				[a, b, c]));
		if ((((_p0.ctor === '::') && (_p0._1.ctor === '::')) && (_p0._1._1.ctor === '::')) && (_p0._1._1._1.ctor === '[]')) {
			var _p3 = _p0._1._1._0;
			var _p2 = _p0._1._0;
			var _p1 = _p0._0;
			return (_elm_lang$core$Native_Utils.cmp(_p1, 0) < 1) ? _elm_lang$core$Result$Err('Invalid lengths') : ((_elm_lang$core$Native_Utils.cmp(_p1 + _p2, _p3) < 1) ? _elm_lang$core$Result$Err('Violates inequality') : (_elm_lang$core$Native_Utils.eq(_p1, _p3) ? _elm_lang$core$Result$Ok('equilateral') : ((_elm_lang$core$Native_Utils.eq(_p1, _p2) || _elm_lang$core$Native_Utils.eq(_p2, _p3)) ? _elm_lang$core$Result$Ok('isosceles') : _elm_lang$core$Result$Ok('scalene'))));
		} else {
			return _elm_lang$core$Result$Err('idek');
		}
	});
