var _exercism$xelm$Sublist$convert = F2(
	function (a, b) {
		return A2(_elm_lang$core$String$append, a, b);
	});
var _exercism$xelm$Sublist$stringList = function (list) {
	return A3(
		_elm_lang$core$List$foldr,
		_exercism$xelm$Sublist$convert,
		'',
		A2(
			_elm_lang$core$List$map,
			function (i) {
				return _elm_lang$core$Basics$toString(i);
			},
			list));
};
var _exercism$xelm$Sublist$version = 2;
var _exercism$xelm$Sublist$Superlist = {ctor: 'Superlist'};
var _exercism$xelm$Sublist$Sublist = {ctor: 'Sublist'};
var _exercism$xelm$Sublist$Unequal = {ctor: 'Unequal'};
var _exercism$xelm$Sublist$Equal = {ctor: 'Equal'};
var _exercism$xelm$Sublist$sublist = F2(
	function (list1, list2) {
		var stringList2 = _exercism$xelm$Sublist$stringList(list2);
		var stringList1 = _exercism$xelm$Sublist$stringList(list1);
		return _elm_lang$core$Native_Utils.eq(stringList1, stringList2) ? _exercism$xelm$Sublist$Equal : (A2(_elm_lang$core$String$contains, stringList1, stringList2) ? _exercism$xelm$Sublist$Sublist : (A2(_elm_lang$core$String$contains, stringList2, stringList1) ? _exercism$xelm$Sublist$Superlist : _exercism$xelm$Sublist$Unequal));
	});
